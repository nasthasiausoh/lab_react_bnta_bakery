{"ast":null,"code":"var _jsxFileName = \"/Users/nasthasia/bnta_work/week_09/day_3/task_BNTA_bakery/start_code/src/cake/CakeForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport cakes from \"../cakes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CakeForm = _ref => {\n  _s();\n  let {\n    info,\n    setInfo\n  } = _ref;\n  const [cakeName, setCakeName] = useState(\"\");\n  const [ingredients, setIngredients] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [rating, setRating] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Need to correct logic for handleValidation() and handleFormSubmit(): \n\n  //     const handleValidation = () => {\n\n  //         let errorMessage = \"\";\n\n  //         if(cakes.find((cakeName) => cakes.cakeName === cakes.cakeName)) {\n  //             errorMessage = \"This cake name already exists!\"\n  //         }\n\n  //         if(cakes.find((ingredients) => cakes.ingredients === cakes.ingredients)) {\n  //             errorMessage = \"This list of ingredients already exists!\"\n  //         }\n\n  //         // if(info.find((ingredients) => info.ingredients === ingredients)) {\n  //         //     errorMessage = \"This list of ingredients already exists!\"\n  //         // }\n\n  //         if(cakeName === \"\" || ingredients === \"\" || price === \"\" || rating === \"\" ) {\n  //             errorMessage = \"Please fill in all fields!\"\n  //         }\n\n  //         setError(errorMessage);\n\n  //         return errorMessage !== \"\";\n  //     }\n\n  //     const handleFormSubmit = (e) => {\n  //         e.preventDefault();\n\n  //         if(!handleValidation()) {\n\n  //             const updateCakes = [...cakes]; // or use [...info]\n\n  //             const newCake = {\n  //             cakeName : cakeName,\n  //             ingredients : ingredients.split(\", \"),\n  //             price : price,\n  //             rating : rating\n  //         }\n\n  //         updateCakes.push(newCake);\n  //         setInfo(updateCakes);\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a new cake to the bakery: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"cake name\",\n        placeholder: \"Cake's name\",\n        value: cakeName,\n        onChange: e => setCakeName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"ingredients\",\n        placeholder: \"Ingredients\",\n        value: ingredients // check if i implemented the split properly.\n        ,\n        onChange: e => setIngredients(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"price\",\n        placeholder: \"Price\",\n        value: price,\n        onChange: e => setPrice(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"rating\",\n        placeholder: \"Rating\",\n        value: rating,\n        onChange: e => setRating(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(CakeForm, \"osgfeJAwPYodzl6LM1sTt8ssonc=\");\n_c = CakeForm;\nexport default CakeForm;\nvar _c;\n$RefreshReg$(_c, \"CakeForm\");","map":{"version":3,"names":["useState","cakes","jsxDEV","_jsxDEV","Fragment","_Fragment","CakeForm","_ref","_s","info","setInfo","cakeName","setCakeName","ingredients","setIngredients","price","setPrice","rating","setRating","error","setError","children","fileName","_jsxFileName","lineNumber","columnNumber","type","name","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/nasthasia/bnta_work/week_09/day_3/task_BNTA_bakery/start_code/src/cake/CakeForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport cakes from \"../cakes\";\n\n\nconst CakeForm = ({info, setInfo}) => {\n\n    const [cakeName, setCakeName] = useState(\"\");\n    const [ingredients, setIngredients] = useState(\"\")\n    const [price, setPrice] = useState(\"\");\n    const [rating, setRating] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n\n// Need to correct logic for handleValidation() and handleFormSubmit(): \n\n//     const handleValidation = () => {\n\n//         let errorMessage = \"\";\n\n//         if(cakes.find((cakeName) => cakes.cakeName === cakes.cakeName)) {\n//             errorMessage = \"This cake name already exists!\"\n//         }\n\n//         if(cakes.find((ingredients) => cakes.ingredients === cakes.ingredients)) {\n//             errorMessage = \"This list of ingredients already exists!\"\n//         }\n\n//         // if(info.find((ingredients) => info.ingredients === ingredients)) {\n//         //     errorMessage = \"This list of ingredients already exists!\"\n//         // }\n        \n\n//         if(cakeName === \"\" || ingredients === \"\" || price === \"\" || rating === \"\" ) {\n//             errorMessage = \"Please fill in all fields!\"\n//         }\n\n//         setError(errorMessage);\n\n//         return errorMessage !== \"\";\n//     }\n\n\n//     const handleFormSubmit = (e) => {\n//         e.preventDefault();\n\n//         if(!handleValidation()) {\n\n//             const updateCakes = [...cakes]; // or use [...info]\n\n//             const newCake = {\n//             cakeName : cakeName,\n//             ingredients : ingredients.split(\", \"),\n//             price : price,\n//             rating : rating\n//         }\n\n//         updateCakes.push(newCake);\n//         setInfo(updateCakes);\n//     }\n// }\n\n\n\n    return (\n        <>\n        <h2>Add a new cake to the bakery: </h2>\n        {/* <form onSubmit = {handleFormSubmit} > */}\n        < form >\n            <input \n            type = \"text\"\n            name = \"cake name\"\n            placeholder = \"Cake's name\"\n            value = {cakeName}\n            onChange = { (e) => setCakeName(e.target.value)} />\n\n            <input \n            type = \"text\"\n            name = \"ingredients\"\n            placeholder = \"Ingredients\"\n            value = {ingredients} // check if i implemented the split properly.\n            onChange = { (e) => setIngredients(e.target.value)} />\n\n            <input \n            type = \"text\"\n            name = \"price\"\n            placeholder = \"Price\"\n            value = {price}\n            onChange = { (e) => setPrice(e.target.value)} />\n\n            <input \n            type = \"text\"\n            name = \"rating\"\n            placeholder = \"Rating\"\n            value = {rating}\n            onChange = { (e) => setRating(e.target.value)} />\n            <input type =  \"submit\" value = \"Submit\" />\n            \n        </form>\n\n        <p> {error} </p>      \n    </>\n );\n};\n\nexport default CakeForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}